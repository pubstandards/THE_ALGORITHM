import datetime
import pytest
from the_algorithm import gen_ps_dates, ps_offset_from_date, ps_date_from_offset


PS_DATES_TO_2020 = [
    # Dates generated by the algorithm at 12/09/2024, assumed to be correct
    # because beer was drunk on these dates.
    datetime.date(2005, 12, 15),
    datetime.date(2006, 1, 12),
    datetime.date(2006, 2, 16),
    datetime.date(2006, 3, 16),
    datetime.date(2006, 4, 13),
    datetime.date(2006, 5, 18),
    datetime.date(2006, 6, 15),
    datetime.date(2006, 7, 13),
    datetime.date(2006, 8, 17),
    datetime.date(2006, 9, 14),
    datetime.date(2006, 10, 12),
    datetime.date(2006, 11, 16),
    datetime.date(2006, 12, 14),
    datetime.date(2007, 1, 18),
    datetime.date(2007, 2, 15),
    datetime.date(2007, 3, 15),
    datetime.date(2007, 4, 12),
    datetime.date(2007, 5, 17),
    datetime.date(2007, 6, 14),
    datetime.date(2007, 7, 12),
    datetime.date(2007, 8, 16),
    datetime.date(2007, 9, 13),
    datetime.date(2007, 10, 18),
    datetime.date(2007, 11, 15),
    datetime.date(2007, 12, 13),
    datetime.date(2008, 1, 17),
    datetime.date(2008, 2, 14),
    datetime.date(2008, 3, 13),
    datetime.date(2008, 4, 17),
    datetime.date(2008, 5, 15),
    datetime.date(2008, 6, 12),
    datetime.date(2008, 7, 17),
    datetime.date(2008, 8, 14),
    datetime.date(2008, 9, 18),
    datetime.date(2008, 10, 16),
    datetime.date(2008, 11, 13),
    datetime.date(2008, 12, 18),
    datetime.date(2009, 1, 15),
    datetime.date(2009, 2, 12),
    datetime.date(2009, 3, 12),
    datetime.date(2009, 4, 16),
    datetime.date(2009, 5, 14),
    datetime.date(2009, 6, 18),
    datetime.date(2009, 7, 16),
    datetime.date(2009, 8, 13),
    datetime.date(2009, 9, 17),
    datetime.date(2009, 10, 15),
    datetime.date(2009, 11, 12),
    datetime.date(2009, 12, 17),
    datetime.date(2010, 1, 14),
    datetime.date(2010, 2, 11),
    datetime.date(2010, 3, 18),
    datetime.date(2010, 4, 15),
    datetime.date(2010, 5, 13),
    datetime.date(2010, 6, 17),
    datetime.date(2010, 7, 15),
    datetime.date(2010, 8, 12),
    datetime.date(2010, 9, 16),
    datetime.date(2010, 10, 14),
    datetime.date(2010, 11, 18),
    datetime.date(2010, 12, 16),
    datetime.date(2011, 1, 13),
    datetime.date(2011, 2, 17),
    datetime.date(2011, 3, 17),
    datetime.date(2011, 4, 14),
    datetime.date(2011, 5, 12),
    datetime.date(2011, 6, 16),
    datetime.date(2011, 7, 14),
    datetime.date(2011, 8, 18),
    datetime.date(2011, 9, 15),
    datetime.date(2011, 10, 13),
    datetime.date(2011, 11, 17),
    datetime.date(2011, 12, 15),
    datetime.date(2012, 1, 12),
    datetime.date(2012, 2, 16),
    datetime.date(2012, 3, 15),
    datetime.date(2012, 4, 12),
    datetime.date(2012, 5, 17),
    datetime.date(2012, 6, 14),
    datetime.date(2012, 7, 12),
    datetime.date(2012, 8, 16),
    datetime.date(2012, 9, 13),
    datetime.date(2012, 10, 18),
    datetime.date(2012, 11, 15),
    datetime.date(2012, 12, 13),
    datetime.date(2013, 1, 17),
    datetime.date(2013, 2, 14),
    datetime.date(2013, 3, 14),
    datetime.date(2013, 4, 18),
    datetime.date(2013, 5, 16),
    datetime.date(2013, 6, 13),
    datetime.date(2013, 7, 18),
    datetime.date(2013, 8, 15),
    datetime.date(2013, 9, 12),
    datetime.date(2013, 10, 17),
    datetime.date(2013, 11, 14),
    datetime.date(2013, 12, 12),
    datetime.date(2014, 1, 16),
    datetime.date(2014, 2, 13),
    datetime.date(2014, 3, 13),
    datetime.date(2014, 4, 17),
    datetime.date(2014, 5, 15),
    datetime.date(2014, 6, 12),
    datetime.date(2014, 7, 17),
    datetime.date(2014, 8, 14),
    datetime.date(2014, 9, 18),
    datetime.date(2014, 10, 16),
    datetime.date(2014, 11, 13),
    datetime.date(2014, 12, 18),
    datetime.date(2015, 1, 15),
    datetime.date(2015, 2, 12),
    datetime.date(2015, 3, 12),
    datetime.date(2015, 4, 16),
    datetime.date(2015, 5, 14),
    datetime.date(2015, 6, 18),
    datetime.date(2015, 7, 16),
    datetime.date(2015, 8, 13),
    datetime.date(2015, 9, 17),
    datetime.date(2015, 10, 15),
    datetime.date(2015, 11, 12),
    datetime.date(2015, 12, 17),
    datetime.date(2016, 1, 14),
    datetime.date(2016, 2, 11),
    datetime.date(2016, 3, 17),
    datetime.date(2016, 4, 14),
    datetime.date(2016, 5, 12),
    datetime.date(2016, 6, 16),
    datetime.date(2016, 7, 14),
    datetime.date(2016, 8, 18),
    datetime.date(2016, 9, 15),
    datetime.date(2016, 10, 13),
    datetime.date(2016, 11, 17),
    datetime.date(2016, 12, 15),
    datetime.date(2017, 1, 12),
    datetime.date(2017, 2, 16),
    datetime.date(2017, 3, 16),
    datetime.date(2017, 4, 13),
    datetime.date(2017, 5, 18),
    datetime.date(2017, 6, 15),
    datetime.date(2017, 7, 13),
    datetime.date(2017, 8, 17),
    datetime.date(2017, 9, 14),
    datetime.date(2017, 10, 12),
    datetime.date(2017, 11, 16),
    datetime.date(2017, 12, 14),
    datetime.date(2018, 1, 18),
    datetime.date(2018, 2, 15),
    datetime.date(2018, 3, 15),
    datetime.date(2018, 4, 12),
    datetime.date(2018, 5, 17),
    datetime.date(2018, 6, 14),
    datetime.date(2018, 7, 12),
    datetime.date(2018, 8, 16),
    datetime.date(2018, 9, 13),
    datetime.date(2018, 10, 18),
    datetime.date(2018, 11, 15),
    datetime.date(2018, 12, 13),
    datetime.date(2019, 1, 17),
    datetime.date(2019, 2, 14),
    datetime.date(2019, 3, 14),
    datetime.date(2019, 4, 18),
    datetime.date(2019, 5, 16),
    datetime.date(2019, 6, 13),
    datetime.date(2019, 7, 18),
    datetime.date(2019, 8, 15),
    datetime.date(2019, 9, 12),
    datetime.date(2019, 10, 17),
    datetime.date(2019, 11, 14),
    datetime.date(2019, 12, 12),
    datetime.date(2020, 1, 16),
    datetime.date(2020, 2, 13),
]


def test_generator():
    generator = gen_ps_dates()

    until_2020 = [next(generator) for _ in range(len(PS_DATES_TO_2020))]
    assert until_2020 == PS_DATES_TO_2020

    # The next date after the COVID hiatus is 2024-09-12
    assert next(generator) == datetime.date(2024, 9, 12)

    next_10_years = [next(generator) for _ in range(10 * 12)]
    for date in next_10_years:
        # Check we are in fact on Thursday
        assert date.weekday() == 3


def test_offset_from_date():
    assert ps_offset_from_date(datetime.date(2005, 12, 15)) == 1
    assert ps_offset_from_date(datetime.date(2006, 1, 12)) == 2

    with pytest.raises(ValueError):
        # Before the Pub Standards era
        ps_offset_from_date(datetime.date(2005, 1, 1))

    with pytest.raises(ValueError):
        # Not a Pub Standards date
        ps_offset_from_date(datetime.date(2005, 12, 16))

    # Final date before the COVID hiatus
    assert ps_offset_from_date(datetime.date(2020, 2, 13)) == 171

    with pytest.raises(ValueError):
        # During the COVID hiatus
        ps_offset_from_date(datetime.date(2020, 3, 12))

    # First date after COVID hiatus
    assert ps_offset_from_date(datetime.date(2024, 9, 12)) == 172


def test_from_offset():
    assert ps_date_from_offset(1) == datetime.date(2005, 12, 15)
    assert ps_date_from_offset(2) == datetime.date(2006, 1, 12)
    # Final date before the COVID hiatus
    assert ps_date_from_offset(171) == datetime.date(2020, 2, 13)
    # First date after COVID hiatus
    assert ps_date_from_offset(172) == datetime.date(2024, 9, 12)
